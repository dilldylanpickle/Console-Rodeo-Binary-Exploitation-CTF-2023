#!/bin/bash

# Function to check and install packages
check_and_install() {
    local package=$1
    if ! dpkg --get-selections | grep -q "^$package[[:space:]]*install$" ; then
        echo "$package package is not installed. Would you like to install it now? (y/n)"
        read -r answer
        if [ "$answer" != "${answer#[Yy]}" ] ;then
            sudo apt-get update && sudo apt-get install "$package"
        else
            echo "$package is required to proceed :("
            exit 1
        fi
    else
        echo "$package is already installed."
    fi
}

# Function to check and install Python3 pip
install_pip() {
    if ! command -v pip3 &> /dev/null; then
        echo "pip3 for Python3 is not installed. Would you like to install it now? (y/n)"
        read -r answer
        if [ "$answer" != "${answer#[Yy]}" ]; then
            sudo apt-get update
            sudo apt-get install -y python3-pip
        else
            echo "pip3 is required for many Python packages :("
            exit 1
        fi
    else
        echo "pip3 is already installed."
    fi
}

# Function to install gef for gdb
install_gef() {
    if ls ~/.gef-*.py 1> /dev/null 2>&1; then
        echo "GEF (GDB Enhanced Features) is already installed."
    else
        echo "GEF (GDB Enhanced Features) is not installed. Would you like to install it now? (y/n)"
        read -r answer
        if [ "$answer" != "${answer#[Yy]}" ]; then
            bash -c "$(curl -fsSL https://gef.blah.cat/sh)"
        else
            echo "GEF is required for enhanced debugging experience :("
            exit 1
        fi
    fi
}

# Function to check and install pwntools
install_pwntools() {
    if ! python3 -m pip list | grep -q pwntools; then
        echo "pwntools is not installed. Would you like to install it now? (y/n)"
        read -r answer
        if [ "$answer" != "${answer#[Yy]}" ]; then
            sudo apt-get update
            sudo apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential
            python3 -m pip install --upgrade pip
            python3 -m pip install --upgrade pwntools
        else
            echo "pwntools is required for exploitation tasks :("
            exit 1
        fi
    else
        echo "pwntools is already installed."
    fi
}

# Check and install gcc-multilib
check_and_install gcc-multilib

# Check and install gdb
check_and_install gdb

# Check and install curl
check_and_install curl

# Check and install python3
check_and_install python3

# Check and install ROPgadget
check_and_install python3-ropgadget

# Install pip for Python3
install_pip

# Install GEF
install_gef

# Install pwntools
install_pwntools

# Disable ASLR
echo "Disabling ASLR..."
echo 0 | sudo tee /proc/sys/kernel/randomize_va_space

# loop through each directory and compile all the binaries
for dir in challenge*; do
    if [ -d "$dir" ]; then
        cd "$dir" || exit
        for file in *.c; do
            # Default flags
            flags="-fno-stack-protector -z execstack -no-pie -g -Wall -w -m32"
            
            # Modify flags for specific challenges
            if [ "$dir" == "challenge4" ]; then
                # Remove -z execstack for challenge4
                flags="-fno-stack-protector -no-pie -g -Wall -w -m32"
            elif [ "$dir" == "challenge5" ]; then
                # Remove -z execstack and -m32 for challenge5
                flags="-fno-stack-protector -no-pie -g -Wall -w"
            fi
            
            # Compile the file with the specified flags
            gcc $flags "$file" -o "${file%.c}"
        done
        cd ..
    fi
done
